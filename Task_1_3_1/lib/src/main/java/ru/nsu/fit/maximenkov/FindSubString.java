/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.nsu.fit.maximenkov;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Class of finding all enters of substring into some string.
 */
public class FindSubString {

  /**
   * Function of finding some substring in text.
   *
   * @param reader some text reader.
   * @param substring we need to find.
   * @return indexes list of substring enters.
   * @throws IOException in case we cant read.
   */
  public static List<Integer> findSubstring(Reader reader, String substring) throws IOException {
    int countSymbolsInBlock = substring.length() * 2, blockNumber = 0;
    char[] buffer1 = new char[countSymbolsInBlock];
    char[] buffer2 = null;
    List<Integer> indexes = new ArrayList<>();
    while (reader.read(buffer1) != -1) {
      int idx;
      if (buffer2 != null) {
        String textBlock1 = String.valueOf(buffer1);
        String textBlock2 = String.valueOf(buffer2);
        String unitedBlock = textBlock2.concat(textBlock1);
        idx = 0;
        while (idx != -1) {
          idx = unitedBlock.indexOf(substring, idx + 1);
          if (idx != -1 && !indexes.contains(idx + countSymbolsInBlock * blockNumber)) {
            indexes.add(idx + countSymbolsInBlock * blockNumber);
          }
        }
      } else {
        blockNumber--;
        String textBlock1 = String.valueOf(buffer1);
        idx = 0;
        while (true) {
          idx = textBlock1.indexOf(substring, idx + 1);
          if (idx != -1) {
            indexes.add(idx);
          } else {
            break;
          }
        }
      }
      buffer2 = buffer1.clone();
      blockNumber++;
    }
    return indexes;
  }
}


