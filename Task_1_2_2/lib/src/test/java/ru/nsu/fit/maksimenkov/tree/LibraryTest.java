/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.maksimenkov.tree;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class LibraryTest {
  @Test
  void addNewNodeTest() {
    Node<String> tree = new Node<>();
    tree.add("A");
    tree.add("B");
    tree.add("AB");
    tree.setBfs();
    Iterator<Node<String>> bfs = tree.iterator();
    Assertions.assertEquals("A", bfs.next().value);
    Assertions.assertEquals("B", bfs.next().value);
    Assertions.assertEquals("AB", bfs.next().value);
  }

  @Test
  void removeNodeTest() {
    Node<Integer> tree = new Node<>();
    tree.add(123);
    Node<Integer> nodeToRemove = tree.add(849);
    tree.remove(nodeToRemove);
    tree.setDfs();
    BreadthFirstIterator<Integer> dfs = new BreadthFirstIterator<>(tree);
    Assertions.assertEquals(123, dfs.next().value);
    Assertions.assertFalse(dfs.hasNext());
  }

  @Test
  void concurrentModExceptionCheck(){
    boolean isExceptionCatch = false;
    Node<Integer> tree = new Node<>();
    tree.add(123);
    Node<Integer> node2 = tree.add(758);
    Node<Integer> node3 = tree.add(543);
    tree.setBfs();
    try{
      for (Node<Integer> node : tree){
        tree.add(node3, 859);
      }
    } catch (ConcurrentModificationException e){
      isExceptionCatch = true;
    }
    Assertions.assertTrue(isExceptionCatch);
  }
}
