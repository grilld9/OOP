/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.nsu.fit.maksimenkov.stack;

/**
 * Stack class.
 */
public class Stack {
  private int arrCountElements = 1000;
  int[] arr = new int[arrCountElements];
  private int last = 0;
  private int stackMaxIdx = 999;

  private void extendArray(int[] arr) {
    int[] arrNew = new int[arrCountElements * 2];
    arrCountElements *= 2;
    stackMaxIdx = arrCountElements - 1;
    for (int i = 0; i < last; i++) {
      arrNew[i] = arr[i];
    }
    arr = arrNew;
  }

  /**
   * Push some element into stack.
   *
   * @param x is the element we need to push to stack.
   */
  public void push(int x) {
    if (last < stackMaxIdx) {
      last++;
      arr[last] = x;
    } else {
      extendArray(arr);
    }
  }

  /**
   * Pop some element from stack and return it.
   *
   * @return -1000000 if stack is empty or element if stack is not empty.
   *
   */
  public int pop() {
    if (last > 0) {
      int x = arr[last];
      last--;
      return x;
    } else {
      System.out.println("Stack is empty!");
      return -1000000;
    }
  }

  /**
   * Count elements in stack.
   *
   * @return currant count of elements in stack.
   */
  public int count() {
    return last;
  }

  /**
   * Method of pushing some stack into other stack.
   *
   * @param stack we need to push into other stack.
   */
  public void pushStack(Stack stack) {
    while (stack.count() != 0) {
      int x = stack.pop();
      push(x);
      if (last == stackMaxIdx) {
        extendArray(arr);
      }
    }
  }

  /**
   * Pop some elements from stack and return new stack with these elements.
   *
   * @param x count of elements we need to pop from stack.
   *
   * @return some elements pop from stack.
   */
  public Stack popStack(int x) {
    Stack stack = new Stack();
    for (int i = 0; i < x; i++) {
      stack.push(pop());
      if (last == 0) {
        return stack;
      }
    }
    return stack;
  }
}
